type User {
  userId: ID!
  username: String!
}

type Match {
  matchId: Int!
  matchName: String!
  isActive: Boolean!
  numPlayers: Int!
  numDecks: Int!
  currentGame: Game
  allGames: [Game!]!
  matchInfos: [MatchInfo]!
}

type MatchInfo {
  user: User
  userScore: Int!
  orderId: Int!
}

type Game {
  gameId: Int!
  matchId: Int!
  isActive: Boolean!
  trumpSuit: Int
  trumpNumber: Int
  startingUserId: ID
  bottomSettingUserId: ID #Frequently equal to starting player but not always
  bottomCardIds: [Int] #Only visible to player who set the bottom
  gameInfos: [GameInfo]!
  playedTricks: [Trick]!
}

# GameInfo is user specific
type GameInfo {
  user: User
  currentPoints: Int!
  hand: [Int]! #Only visible to player whose user ID matches
}

type Trick {
  trickId: Int!
  gameId: Int!
  #orderId: Int! Removing in favor of just assuming assending order of trick id
  startingUserId: ID!
  winningUserId: ID
  playType: Int #Enum on client
  trickInfos: [TrickInfo]!
}

type TrickInfo {
  userId: ID!
  playedCards: [Int!]!
}

# the schema allows the following query:
type Query {
  user(userId: ID!): User
  game(gameId: Int!, userId: ID!): Game
  match(matchId: Int!, userId: ID!): Match
  trick(trickId: Int!): Trick
  activeMatches(userId: ID!): [Match!]!
  activeGames(userId: ID!): [Game!]
  allMatches(userId: ID!): [Match!]
}

# this schema allows the following mutation:
type Mutation {
  createMatch(
    userId: ID!
    numPlayers: Int!
    numDecks: Int!
    matchName: String!
  ): Match! #One user creates a game and the others join
  createUser(username: String!, password: String!): String!
  joinMatch(userId: ID!, matchId: Int): Match
  playCards(userId: ID!, cardIds: [Int!]!, gameId: Int!): Trick
  callSuit(userId: ID!, gameId: Int!, suitType: Int!): Game
  flipSuit(userId: ID!, gameId: Int!, suitType: Int!): Game
  setBottom(userId: ID!, gameId: Int!, cardIds: [Int!]!): Game
}

schema {
  query: Query
  mutation: Mutation
}
