type User {
  userId: ID!
  username: String!
  activeMatches: [Match!]!
}

type Match {
  matchId: Int!
  isActive: Boolean!
  userIds: [ID!]!
  currentGame: Game!
}

type Game {
  gameId: Int!
  matchId: Int!
  isActive: Boolean!
  trumpSuit: Int
  trumpNumber: Int
  startingUserId: ID
  currentPoints: Int
}

type Trick {
  trickId: Int!
  startingUserId: ID!
  winningUserId: ID
  playedCardIds: [Int!]!
}

# the schema allows the following query:
type Query {
  game(gameId: Int!): Game
  user(userId: ID!): User
  match(matchId: Int!): Match
  currentGame(matchId: Int!): Game
  currentPoints(userId: ID!, gameId: Int!): Int
}

# this schema allows the following mutation:
type Mutation {
  playCard(userId: ID!, cardId: Int!, gameId: Int!): Game
}

schema {
  query: Query
  mutation: Mutation
}
