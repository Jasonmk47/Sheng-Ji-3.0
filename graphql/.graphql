# Keep enums in sync with enums.js
enum SuitTypes {
  clubs
  diamonds
  hearts
  spades
  jokers
};

enum PlayTypes {
  single
  pair
  consecutivePair
  shuai
};

type User {
  userId: ID!
  username: String!
}

type Match {
  matchId: Int!
  isActive: Boolean!
  userIds: [ID!]!
  userLevels: [Int!]!
  defenderUserIds: [ID!]
  currentGame: Game!
}

type Game {
  gameId: Int!
  matchId: Int!
  isActive: Boolean!
  trumpSuit: SuitTypes
  trumpNumber: Int
  startingUserId: ID
  currentPoints: Int
  hand: [Int!]!
}

type Hand {
  cardIds: [Int!]!
}

type Trick {
  trickId: Int!
  startingUserId: ID!
  winningUserId: ID
  playedCardIds: [Int!]!
  playType: PlayTypes
}

# the schema allows the following query:
type Query {
  user(userId: ID!): User
  game(gameId: Int!, userId: ID!): Game
  match(matchId: Int!, userId: ID!): Match
  trick(trickId: Int!): Trick
  activeGame(matchId: Int!, userId: ID!): Game
  activeMatches(userId: ID!): [Match!]!
  allGames(userId: ID!)
  allMatches(userId: ID!)
  allMatchGames(matchId: Int!, userId:ID!)
}

# this schema allows the following mutation:
type Mutation {
  playCard(userId: ID!, cardId: Int!, gameId: Int!): Game
}

schema {
  query: Query
  mutation: Mutation
}
